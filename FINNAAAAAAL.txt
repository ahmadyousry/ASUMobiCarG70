
float linear_velocity =     57.67 ;// in cm/s
float rpm =(60*(57.67/12.5))/(2*2*3.14) ; 


#define MOTOR1_1 (5)
#define MOTOR1_2 (6)
#define MOTOR2_1 (3)
#define MOTOR2_2 (9)
char val;
int en1 =13;
int en2 = 10;
// line follower

#define LEFT_SENSOR (12)
#define MID_SENSOR (4)
#define RIGHT_SENSOR (8)
 // ultra sonic
 
const byte trigger =2;
const byte echo =7;
float distance ;
unsigned long period;


int SPEED=80 ;
int SPEED1=150;
void forward (void);
void left(void);
void right(void);

void setup() {
  // put your setup code here, to run once:
pinMode(MOTOR1_1,OUTPUT);
pinMode(MOTOR1_2,OUTPUT);
pinMode(MOTOR2_1,OUTPUT);
pinMode(MOTOR2_2,OUTPUT);
pinMode(en1, OUTPUT);
  pinMode(en2, OUTPUT);
pinMode (trigger,OUTPUT);
pinMode (echo, INPUT);

pinMode(LEFT_SENSOR,INPUT);
pinMode(RIGHT_SENSOR,INPUT);
pinMode(MID_SENSOR,INPUT);

Serial.begin(9600);
}

void loop()
{

digitalWrite(en1, HIGH);
  digitalWrite(en2, HIGH);
  // BLUE TOOTH AND ULTRA SONIC
  if (Serial.available() > 0)
  {
  val = Serial.read();
  Serial.println(val);
  digitalWrite (trigger, LOW);
      delayMicroseconds (3);    
      digitalWrite (trigger, HIGH);
      delayMicroseconds (10);
      digitalWrite (trigger, LOW);
      period =pulseIn (echo,HIGH);
      distance=float (period)/58.8;      // distance=[period /(10^6 *2)]/380*100 cm
      Serial.println (distance);
      delay (60);
   if (distance<=30)
   {
    digitalWrite(MOTOR1_1, LOW);
      digitalWrite(MOTOR1_2, LOW);
      digitalWrite(MOTOR2_1, LOW);
      digitalWrite(MOTOR2_2, LOW); 
   }
   
  else if( val == 'F') // Forward
    {
      digitalWrite(MOTOR1_1, HIGH);
      digitalWrite(MOTOR1_2, LOW);
      digitalWrite(MOTOR2_1, HIGH);
      digitalWrite(MOTOR2_2, LOW); 
    }
  else if(val == 'B') // Backward
    {
      digitalWrite(MOTOR1_1, LOW);
      digitalWrite(MOTOR1_2, HIGH);
      digitalWrite(MOTOR2_1, LOW);
      digitalWrite(MOTOR2_2, HIGH); 
    }
  
    else if(val == 'L') //Left
    {
    digitalWrite(MOTOR1_1, LOW);
    digitalWrite(MOTOR1_2, LOW);
    digitalWrite(MOTOR2_1, HIGH);
    digitalWrite(MOTOR2_2, LOW);
    }
    else if(val == 'R') //Right
    {
    digitalWrite(MOTOR1_1, HIGH);
    digitalWrite(MOTOR1_2, LOW);
    digitalWrite(MOTOR2_1, LOW);
    digitalWrite(MOTOR2_2, LOW); 
    }
    
  else if(val == 'S') //Stop
    {
    digitalWrite(MOTOR1_1, LOW);
    digitalWrite(MOTOR1_2, LOW);
    digitalWrite(MOTOR2_1, LOW);
    digitalWrite(MOTOR2_2, LOW); 
    }
  else if(val == 'I') //Forward Right (line follower)
    {
      //    LINE FOLLOWER CODE
  
  // put your main code here, to run repeatedly:
       int LS=digitalRead(LEFT_SENSOR);
       int RS=digitalRead(RIGHT_SENSOR);
       int MS=digitalRead(MID_SENSOR);
 if((LS==HIGH&&(RS==LOW)))
  {
      left();
     while(MS==LOW&&RS==LOW) 
    
     {
      left();
      RS=digitalRead(RIGHT_SENSOR);
      MS=digitalRead(MID_SENSOR);
     }
      forward();
  }
  else if((LS==LOW&&(RS==HIGH)))
  {
     right();
     while(LS==LOW&&MS==LOW)
     {
      right();
      LS=digitalRead(LEFT_SENSOR);
      MS=digitalRead(MID_SENSOR);
     }
     forward(); // rs high , ms high 
  }
  else{
    forward();  // ls =high && rs = low  || both are low  && both are high   || forth condition is elseif 
    }
    }
  else if(val == 'J') // distance forward
    {
    int x=Serial.readString().toInt();
       forward1 ();
       delay ((x/57.667)*1000);
        stopp ();
    }
 else if(val == 'B') // distance backward
    {
    int x=Serial.readString().toInt();
       backward1();
       delay ((x/57.667)*1000);
        stopp ();
    }
   else if(val == 'G') //angle
    {
    int x=Serial.readString().toInt();
      right1();
  float angle_delay = ((x*60)/(rpm*360)) ;
  delay(angle_delay*1000+100);
  stopp (); 
     
    }
   
  else if(val == 'H') //shape
    {
     // infinity
      right3();
      delay(6500);
      left3();
      delay(6000);
      stopp();
      delay (5000);
    
      // rectangular
      
      forward1();
float twoMeters_dalay = (2*100)/57.667;    // 2 (merters not cm) hence linear_velocity is in m/s so i multiplied by 100 in formula
 float ortho_angle= ((90*60)/(rpm*360));
delay(twoMeters_dalay*1000);
right1();
delay(ortho_angle*1000+100);
forward1();
delay(twoMeters_dalay*1000);
right1();
delay(ortho_angle*1000+100);
forward1();
delay(twoMeters_dalay*1000 );
right1();
delay(ortho_angle*1000+100);
forward1();
delay(twoMeters_dalay*1000);
stopp();
delay (5000);
     // circle
      right2();
      delay(12800);
      stopp ();
    }
    


  }
}
void forward (void)
{
  analogWrite(MOTOR1_1,SPEED);
  analogWrite(MOTOR1_2,0);
  analogWrite(MOTOR2_1,SPEED);
  analogWrite(MOTOR2_2,0);
}
void backward (void)
{
  analogWrite(MOTOR1_1,0);
  analogWrite(MOTOR1_2,SPEED);
  analogWrite(MOTOR2_1,0);
  analogWrite(MOTOR2_2,SPEED);
}

void left(void)
{
  analogWrite(MOTOR1_1,0);
  analogWrite(MOTOR1_2,SPEED);
  analogWrite(MOTOR2_1,SPEED);
  analogWrite(MOTOR2_2,0);
}

void right(void)
{
  analogWrite(MOTOR1_1,SPEED);
  analogWrite(MOTOR1_2,0);
  analogWrite(MOTOR2_1,0);
  analogWrite(MOTOR2_2,SPEED);
}
void stopp(void)
 {
  digitalWrite( MOTOR1_1, LOW);
  digitalWrite( MOTOR1_2, LOW);
  digitalWrite( MOTOR2_1, LOW);
  digitalWrite( MOTOR2_2, LOW);
  }
  void forward1 (void)
{
  analogWrite(MOTOR1_1,SPEED1);
  analogWrite(MOTOR1_2,0);
  analogWrite(MOTOR2_1,SPEED1);
  analogWrite(MOTOR2_2,0);
}
void backward1 (void)
{
  analogWrite(MOTOR1_1,0);
  analogWrite(MOTOR1_2,SPEED1);
  analogWrite(MOTOR2_1,0);
  analogWrite(MOTOR2_2,SPEED1);
}

void left1(void)
{
  analogWrite(MOTOR1_1,0);
  analogWrite(MOTOR1_2,0);
  analogWrite(MOTOR2_1,SPEED1);
  analogWrite(MOTOR2_2,0);
}

void right1(void)
{
  analogWrite(MOTOR1_1,SPEED1);
  analogWrite(MOTOR1_2,0);
  analogWrite(MOTOR2_1,0);
  analogWrite(MOTOR2_2,0);
}
void right2(void)
  {
    analogWrite(MOTOR1_1,170);
  analogWrite(MOTOR1_2,0);
  analogWrite(MOTOR2_1,100);
  analogWrite(MOTOR2_2,0);
  }
  void left2(void)
  {
    analogWrite(MOTOR1_1,100);
  analogWrite(MOTOR1_2,0);
  analogWrite(MOTOR2_1,170);
  analogWrite(MOTOR2_2,0);
  }
  void right3(void)
  {
    analogWrite(MOTOR1_1,180);
  analogWrite(MOTOR1_2,0);
  analogWrite(MOTOR2_1,80);
  analogWrite(MOTOR2_2,0);
  }
  void left3(void)
  {
    analogWrite(MOTOR1_1,80);
  analogWrite(MOTOR1_2,0);
  analogWrite(MOTOR2_1,180);
  analogWrite(MOTOR2_2,0);
  }

    
 