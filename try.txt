
#define MOTOR1_1 (5)
#define MOTOR1_2 (6)
#define MOTOR2_1 (3)
#define MOTOR2_2 (9)


  char val;
float linear_velocity = ÍÓÈäÇåÇ ;   // in cm/s
float rpm = ÍÓÈäÇåÇ;     
int input ; 
  
int SPEED = 120 ; 

 
void setup() {
          pinMode(MOTOR1_1,OUTPUT);
pinMode(MOTOR1_2,OUTPUT);
pinMode(MOTOR2_1,OUTPUT);
pinMode(MOTOR2_2,OUTPUT);




Serial.begin(9600);
//Serial.setTimeout(10);

 
 
}
 
void loop() {



   if (Serial.available()>0){
  


   // input=Serial.parseInt();
   // Serial.print(input);
    // Serial.print("\n");


    if(val == 'J') //distance point
    {
     input=Serial.readString().toInt();
       float distance_delay= input/linear_velocity;

  delay(distance_delay*1000);
  stop_the_car ();
  delay(250000);
    }
   else if(val == 'G') //angle point
    {
   

  input=Serial.readString().toInt();
  forward_right();
  float angle_delay = input*60/rpm*360 ;
  delay(angle_delay*1000);
  stop_the_car ();
  delay(250000); 

     
    }
  


else if(val == 'H') //shapes point
    {

 forward_right();
 float one_cycle_delay = 60/rpm ;
delay(one_cycle_delay*1000);
forward_left();
delay(one_cycle_delay*1000);



delay(25000);
forward();
float twoMeters_dalay = 2*100/linear_velocity;    // 2 (merters not cm) hence linear_velocity is in m/s so i multiplied by 100 in formula
 float ortho_angle= 90*60/rpm*360;
delay(twoMeters_dalay*1000);
stop_the_car();
right();
delay(ortho_angle*1000);
forward();
delay(twoMeters_dalay*1000);
stop_the_car();
right();
delay(ortho_angle*1000);
forward();
delay(twoMeters_dalay*1000 );
stop_the_car();
right();
delay(ortho_angle*1000);
forward();
delay(twoMeters_dalay*1000);
stop_the_car();
delay(25000);




forward_right();
delay(one_cycle_delay*1000);
stop_the_car();
delay(25000);


}
}


}



void forward (void)
{
  analogWrite(MOTOR1_1,SPEED);
  analogWrite(MOTOR1_2,0);
  analogWrite(MOTOR2_1,SPEED);
  analogWrite(MOTOR2_2,0);
}

void left(void)
{
  analogWrite(MOTOR1_1,0);
  analogWrite(MOTOR1_2,SPEED);
  analogWrite(MOTOR2_1,SPEED);
  analogWrite(MOTOR2_2,0);
}

void right(void)
{
  analogWrite(MOTOR1_1,SPEED);
  analogWrite(MOTOR1_2,0);
  analogWrite(MOTOR2_1,0);
  analogWrite(MOTOR2_2,SPEED);
}

void stop_the_car(){

analogWrite(MOTOR1_1,0);
  analogWrite(MOTOR1_2,0);
  analogWrite(MOTOR2_1,0);
  analogWrite(MOTOR2_2,0);
}



void forward_right(){

analogWrite(MOTOR1_1,SPEED);
  analogWrite(MOTOR1_2,0);
  analogWrite(MOTOR2_1,SPEED);
  analogWrite(MOTOR2_2,SPEED);
}


void forward_left(){

analogWrite(MOTOR1_1,0);
  analogWrite(MOTOR1_2,SPEED);
  analogWrite(MOTOR2_1,SPEED);
  analogWrite(MOTOR2_2,SPEED);
}


/*
1-1  1-2   front
2-2  2-1
*/



   